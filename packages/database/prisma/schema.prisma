// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  OPERATOR
}

enum MovementType {
  INCOME
  EXPENSE
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CompanyStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}


model Company {
  id            String         @id @default(cuid())
  name          String
  email         String
  phone         String
  status        CompanyStatus  @default(PENDING)
  requestedBy   String?        // Telegram ID del solicitante
  approvedBy    String?        // ID del super admin que aprob√≥
  approvedAt    DateTime?
  rejectedAt    DateTime?
  rejectionReason String?
  settings      Json           @default("{}")
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  users         User[]
  userCompanies UserCompany[]
  categories    Category[]
  movements     Movement[]
  notifications Notification[]
  
  @@index([status])
  @@index([isActive])
  @@map("companies")
}

model SystemAdmin {
  id          String   @id @default(cuid())
  telegramId  String   @unique
  chatId      String   @unique
  firstName   String
  lastName    String?
  username    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_admins")
}

model User {
  id               String         @id @default(cuid())
  telegramId       String         @unique
  chatId           String         @unique
  companyId        String
  firstName        String
  lastName         String?
  username         String?
  role             UserRole       @default(OPERATOR)
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  company          Company        @relation(fields: [companyId], references: [id])
  userCompanies    UserCompany[]
  movements        Movement[]
  personalMovements PersonalMovement[]
  personalCategories PersonalCategory[]
  auditLogs        AuditLog[]
  
  @@index([companyId])
  @@index([telegramId])
  @@map("users")
}

model Category {
  id            String         @id @default(cuid())
  companyId     String
  name          String
  icon          String?
  color         String?
  parentId      String?
  order         Int            @default(0)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  company       Company        @relation(fields: [companyId], references: [id])
  parent        Category?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[]     @relation("CategoryHierarchy")
  movements     Movement[]
  
  @@unique([companyId, name, parentId])
  @@index([companyId])
  @@map("categories")
}

model Movement {
  id            String         @id @default(cuid())
  companyId     String
  userId        String
  folio         String
  type          MovementType
  amount        Decimal        @db.Decimal(12, 2)
  currency      String         @default("MXN")
  date          DateTime
  categoryId    String?
  description   String
  vendorName    String?
  invoiceNumber String?
  metadata      Json           @default("{}")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  company       Company        @relation(fields: [companyId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  category      Category?      @relation(fields: [categoryId], references: [id])
  attachments   Attachment[]
  auditLogs     AuditLog[]
  
  @@unique([folio])
  @@index([companyId, date])
  @@index([companyId, userId])
  @@index([folio])
  @@map("movements")
}

model Attachment {
  id            String         @id @default(cuid())
  movementId    String
  fileUrl       String
  fileName      String
  fileSize      Int
  mimeType      String
  status        ProcessingStatus @default(PENDING)
  aiData        Json?
  processedAt   DateTime?
  createdAt     DateTime       @default(now())
  
  movement      Movement       @relation(fields: [movementId], references: [id], onDelete: Cascade)
  
  @@index([movementId])
  @@map("attachments")
}

model AuditLog {
  id            String         @id @default(cuid())
  companyId     String
  userId        String
  action        String         // CREATE, UPDATE, DELETE
  entityType    String         // Movement, Category, User
  entityId      String
  oldData       Json?
  newData       Json?
  metadata      Json?
  createdAt     DateTime       @default(now())
  
  user          User           @relation(fields: [userId], references: [id])
  movement      Movement?      @relation(fields: [entityId], references: [id])
  
  @@index([companyId, createdAt])
  @@index([entityType, entityId])
  @@map("audit_logs")
}

model Notification {
  id            String         @id @default(cuid())
  companyId     String
  type          String         // INSTANT, DAILY_SUMMARY
  recipientId   String
  content       String
  sentAt        DateTime?
  metadata      Json?
  createdAt     DateTime       @default(now())
  
  company       Company        @relation(fields: [companyId], references: [id])
  
  @@index([companyId, type])
  @@map("notifications")
}

model UserCompany {
  id          String       @id @default(cuid())
  userId      String
  companyId   String
  role        UserRole     @default(OPERATOR)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
  @@map("user_companies")
}

model PersonalCategory {
  id            String               @id @default(cuid())
  userId        String
  name          String
  icon          String?
  color         String?
  parentId      String?
  order         Int                  @default(0)
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent        PersonalCategory?    @relation("PersonalCategoryHierarchy", fields: [parentId], references: [id])
  children      PersonalCategory[]   @relation("PersonalCategoryHierarchy")
  movements     PersonalMovement[]

  @@unique([userId, name, parentId])
  @@index([userId])
  @@map("personal_categories")
}

model PersonalMovement {
  id            String               @id @default(cuid())
  userId        String
  folio         String
  type          MovementType
  amount        Decimal              @db.Decimal(12, 2)
  currency      String               @default("MXN")
  date          DateTime
  categoryId    String?
  description   String
  vendorName    String?
  invoiceNumber String?
  metadata      Json                 @default("{}")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      PersonalCategory?    @relation(fields: [categoryId], references: [id])
  attachments   PersonalAttachment[]

  @@unique([folio])
  @@index([userId, date])
  @@index([folio])
  @@map("personal_movements")
}

model PersonalAttachment {
  id                  String           @id @default(cuid())
  personalMovementId  String
  fileUrl             String
  fileName            String
  fileSize            Int
  mimeType            String
  status              ProcessingStatus @default(PENDING)
  aiData              Json?
  processedAt         DateTime?
  createdAt           DateTime         @default(now())

  personalMovement    PersonalMovement @relation(fields: [personalMovementId], references: [id], onDelete: Cascade)

  @@index([personalMovementId])
  @@map("personal_attachments")
}