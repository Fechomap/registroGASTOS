import { CommandContext } from 'grammy';
import { MyContext } from '../../types';
import { userRepository, companyRepository } from '@financial-bot/database';
import { createMainMenu, getMainMenuMessage } from '../menus/main.menu';

/**
 * Comando /menu - Mostrar men√∫ principal interactivo
 */
export async function menuCommand(ctx: CommandContext<MyContext>) {
  const telegramId = ctx.from?.id.toString();
  
  if (!telegramId) {
    await ctx.reply('‚ùå No se pudo obtener informaci√≥n de tu cuenta.');
    return;
  }

  try {
    // Buscar usuario
    const user = await userRepository.findByTelegramId(telegramId);
    
    if (!user) {
      await ctx.reply(
        '‚ùå **No est√°s registrado en el sistema**\n\n' +
        'Para usar el bot, tu empresa debe estar registrada y aprobada.\n\n' +
        'Usa `/register_company [nombre] [email]` para solicitar el registro.',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // Buscar empresa
    const company = await companyRepository.findById(user.companyId);
    
    if (!company) {
      await ctx.reply('‚ùå Error al cargar informaci√≥n de la empresa.');
      return;
    }

    // Verificar si la empresa est√° aprobada
    const isApproved = await companyRepository.isCompanyApproved(user.companyId);
    
    if (!isApproved) {
      await ctx.reply(
        `üè¢ **Estado de Empresa: ${company.status}**\n\n` +
        '‚è≥ Tu empresa est√° pendiente de aprobaci√≥n.\n\n' +
        'Recibir√°s una notificaci√≥n cuando sea aprobada.',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // Crear men√∫ principal
    const keyboard = createMainMenu(user.role);
    const message = getMainMenuMessage(
      user.firstName,
      user.role,
      company.name
    );

    await ctx.reply(message, {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    });

  } catch (error) {
    console.error('Error en comando menu:', error);
    await ctx.reply('‚ùå Error al cargar el men√∫. Intenta nuevamente.');
  }
}

/**
 * Comando /start mejorado - Redirige al men√∫
 */
export async function startCommand(ctx: CommandContext<MyContext>) {
  const telegramId = ctx.from?.id.toString();
  
  if (!telegramId) {
    await ctx.reply('‚ùå No se pudo obtener informaci√≥n de tu cuenta.');
    return;
  }

  try {
    // Verificar si es super admin
    const isSystemAdmin = await userRepository.findByTelegramId(telegramId);
    
    if (!isSystemAdmin) {
      // Usuario nuevo
      await ctx.reply(
        'ü§ñ **¬°Bienvenido al Financial Bot!**\n\n' +
        'üè¢ **Sistema de Gesti√≥n Financiera Empresarial**\n\n' +
        '**Primeros pasos:**\n' +
        '1Ô∏è‚É£ Si eres el primer usuario, usa `/setup_super_admin`\n' +
        '2Ô∏è‚É£ Si ya hay un super admin, usa `/register_company`\n' +
        '3Ô∏è‚É£ Una vez aprobado, usa `/menu` para empezar\n\n' +
        '‚ùì Usa `/ayuda` para ver todos los comandos disponibles.',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    // Usuario existente - mostrar men√∫
    await menuCommand(ctx);

  } catch (error) {
    console.error('Error en comando start:', error);
    await ctx.reply('‚ùå Error al inicializar. Intenta nuevamente.');
  }
}